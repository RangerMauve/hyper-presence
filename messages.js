// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

exports.Type = {
  BOOTSTRAP_REQUEST: 1,
  BOOTSTRAP_RESPONSE: 2,
  CONNECTED: 3,
  DISCONNECTED: 4,
  STATE: 5
}

var Message = exports.Message = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var State = exports.State = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Map_string_State = exports.Map_string_State = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineMessage()
defineState()
defineMap_string_State()

function defineMessage () {
  Message.encodingLength = encodingLength
  Message.encode = encode
  Message.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.type)) throw new Error("type is required")
    var len = encodings.enum.encodingLength(obj.type)
    length += 1 + len
    if (defined(obj.bootstrap)) {
      var tmp = Object.keys(obj.bootstrap)
      for (var i = 0; i < tmp.length; i++) {
        tmp[i] = { key: tmp[i], value: obj.bootstrap[tmp[i]] }
      }
      for (var i = 0; i < tmp.length; i++) {
        if (!defined(tmp[i])) continue
        var len = Map_string_State.encodingLength(tmp[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    if (defined(obj.data)) {
      var len = encodings.bytes.encodingLength(obj.data)
      length += 1 + len
    }
    if (defined(obj.id)) {
      var len = encodings.bytes.encodingLength(obj.id)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.type)) throw new Error("type is required")
    buf[offset++] = 0
    encodings.enum.encode(obj.type, buf, offset)
    offset += encodings.enum.encode.bytes
    if (defined(obj.bootstrap)) {
      var tmp = Object.keys(obj.bootstrap)
      for (var i = 0; i < tmp.length; i++) {
        tmp[i] = { key: tmp[i], value: obj.bootstrap[tmp[i]] }
      }
      for (var i = 0; i < tmp.length; i++) {
        if (!defined(tmp[i])) continue
        buf[offset++] = 10
        varint.encode(Map_string_State.encodingLength(tmp[i]), buf, offset)
        offset += varint.encode.bytes
        Map_string_State.encode(tmp[i], buf, offset)
        offset += Map_string_State.encode.bytes
      }
    }
    if (defined(obj.data)) {
      buf[offset++] = 18
      encodings.bytes.encode(obj.data, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.id)) {
      buf[offset++] = 26
      encodings.bytes.encode(obj.id, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      type: 1,
      bootstrap: {},
      data: null,
      id: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 0:
        obj.type = encodings.enum.decode(buf, offset)
        offset += encodings.enum.decode.bytes
        found0 = true
        break
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tmp = Map_string_State.decode(buf, offset, offset + len)
        obj.bootstrap[tmp.key] = tmp.value
        offset += Map_string_State.decode.bytes
        break
        case 2:
        obj.data = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 3:
        obj.id = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineState () {
  State.encodingLength = encodingLength
  State.encode = encode
  State.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.connectedTo)) {
      for (var i = 0; i < obj.connectedTo.length; i++) {
        if (!defined(obj.connectedTo[i])) continue
        var len = encodings.bytes.encodingLength(obj.connectedTo[i])
        length += 1 + len
      }
    }
    if (defined(obj.data)) {
      var len = encodings.bytes.encodingLength(obj.data)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.connectedTo)) {
      for (var i = 0; i < obj.connectedTo.length; i++) {
        if (!defined(obj.connectedTo[i])) continue
        buf[offset++] = 2
        encodings.bytes.encode(obj.connectedTo[i], buf, offset)
        offset += encodings.bytes.encode.bytes
      }
    }
    if (defined(obj.data)) {
      buf[offset++] = 10
      encodings.bytes.encode(obj.data, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      connectedTo: [],
      data: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 0:
        obj.connectedTo.push(encodings.bytes.decode(buf, offset))
        offset += encodings.bytes.decode.bytes
        break
        case 1:
        obj.data = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineMap_string_State () {
  Map_string_State.encodingLength = encodingLength
  Map_string_State.encode = encode
  Map_string_State.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = encodings.string.encodingLength(obj.key)
    length += 1 + len
    if (defined(obj.value)) {
      var len = State.encodingLength(obj.value)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 10
    encodings.string.encode(obj.key, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.value)) {
      buf[offset++] = 18
      varint.encode(State.encodingLength(obj.value), buf, offset)
      offset += varint.encode.bytes
      State.encode(obj.value, buf, offset)
      offset += State.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: "",
      value: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found0 = true
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.value = State.decode(buf, offset, offset + len)
        offset += State.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
